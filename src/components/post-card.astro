---
import Carrousell from "./react/carrousel";
import PostImage from "./post-image.astro";
import LikeBtn from "./react/like-btn";
import PostHeaderTop from "./post-header-top.astro";
import ApiFunctions from "@services/api";
import { authStore } from "@stores/auth";
import type { Post } from "@types";
import { IconAdjustments, IconBubble } from "@tabler/icons-react";

interface Props {
  post: Post;
}

const { userLogged } = authStore.get();
const { post } = Astro.props;

const user = await ApiFunctions(Astro.url.origin).getUser(post.ownerId);

const avatar = user?.avatar[0]?.secureUrl;
const imagesPaths = post?.images?.map((path) => path?.secureUrl);

const hasMultipleImages = imagesPaths?.length > 1;
const hasImages = post?.images?.length !== 0;
// VERIFICAR SI EL USUARIO LOGEADO YA INTERACTUO CON EL POST
const hasLiked = post.likes?.find((id) => id === userLogged?._id) !== undefined;
const hasCommented =
  post.comments?.find((comment) => comment?.owner?._id === userLogged?._id) !==
  undefined;

const isThisUser = authStore.get().userLogged._id === user._id;
---

<article class="post">
  <PostHeaderTop
    name={user?.name}
    id={user?._id}
    createdAt={post?.createdAt}
    username={user?.username}
    content={post?.content}
  />

  <div
    class="post__container--images"
    style=`aspect-ratio: ${hasImages && 16 / 9};`
  >
    {
      hasImages ? (
        hasMultipleImages ? (
          <Carrousell client:visible imagesPaths={imagesPaths} />
        ) : (
          <PostImage postImage={imagesPaths[0]} />
        )
      ) : null
    }
  </div>
  <a
    class="post__btn"
    title=`Go to @${user?.username} profile!`
    href={`/users/${user?._id}`}
  >
    <img
      src={avatar ?? ""}
      alt={user?.name}
      class="post__btn__avatar"
      loading="lazy"
    />
  </a>

  <div class="post__container--actions-btn">
    <div
      style="display: flex; flex-flow: row; gap: 2em; align-items: center; flex: 1; justify-content: center;"
    >
      <LikeBtn
        length={post?.likes?.length}
        payload={{
          from: userLogged?._id,
          to: post?._id,
        }}
        liked={hasLiked}
        origin={Astro.url.origin}
        client:visible
      />
      <a href=""><IconBubble /></a>
    </div>

    {
      isThisUser && (
        <button class="post__edit__btn" title="Settings">
          <IconAdjustments />
        </button>
      )
    }
  </div>
</article>

<style>
  .post {
    position: relative;
    display: grid;
    grid-template-areas:
      "info avatar"
      "images images"
      "buttons buttons";
    grid-template-columns: 1fr auto;
    gap: 6px;
    border-bottom: 1px solid var(--color_secondary);
    padding: var(--padding_boxes) 8px;
    width: 100%;
  }

  .post__container--actions-btn {
    grid-area: buttons;
    width: 100%;
    margin: 0 auto;

    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .post__container--images {
    grid-area: images;
  }

  .post__image {
    aspect-ratio: 16 / 9;
    object-fit: cover;
    object-position: center;
    border-radius: var(--border_size);
  }

  .post__btn {
    grid-area: avatar;
    display: flex;
    max-width: fit-content;
    border: 1px solid var(--color_secondary);
    border-radius: 100%;
    overflow: hidden;
    cursor: pointer;
  }
  .post__btn__avatar {
    aspect-ratio: 4 / 4;
    object-fit: cover;
    object-position: center;
  }
  .post__edit__btn {
    display: grid;
    place-content: center;
    cursor: pointer;
  }
</style>
