---
import IconPoint from "@icons/point.astro";
import { parseDate } from "../helpers/date";
import Carrousell from "./carrousell.astro";
import PostImage from "./post-image.astro";
import Heart from "@icons/heart.astro";
import CommentIcon from "@icons/comment.astro";
import { authStore } from "@stores/auth";
import ActionBtn from "./action-btn.astro";
import Comment from "@icons/comment.astro";
interface Props {
  post: Post;
}

const { userLogged } = await authStore.get();

const { post } = Astro.props;

const user = post.userOwner;

const avatar = user.avatar[0].secureUrl;
const imagesPaths = post?.images?.map((path) => path.secureUrl);

const hasMultipleImages = imagesPaths.length > 1;
const hasImages = post?.images.length !== 0;
const longerContent = post.content.length > 200;
---

<article class="post">
  <div class="post__container">
    <h2 class="post__h2">
      {user?.name}
      <IconPoint />
      <a href={`/users/${user._id}`}>@{user?.username}</a>
      <IconPoint />

      <span>
        {parseDate(post.createdAt)}
      </span>
    </h2>
    <p class="post__content ocult">
      {post?.content}
    </p>
    {longerContent && <button class="post__content__btn">More...</button>}
  </div>

  <div class="post__container--images">
    {
      hasImages ? (
        hasMultipleImages ? (
          <Carrousell imagesPaths={imagesPaths} />
        ) : (
          <PostImage postImage={imagesPaths[0]} />
        )
      ) : null
    }
  </div>
  <a
    class="post__btn"
    title=`Go to @${user?.username} profile!`
    href={`/users/${user?._id}`}
  >
    <img
      src={avatar ?? ""}
      alt={user.name}
      class="post__btn__avatar"
      loading="lazy"
    />
  </a>

  <div class="post__container--actions-btn">
    <ActionBtn
      length={post?.likes?.length}
      payload={{
        from: user._id,
        to: post._id
      }}
      action="like"
    >
      <Heart slot="icon" />
    </ActionBtn>
    <ActionBtn
      length={post?.comments?.length}
      payload={{
        from: user._id,
        to: post._id
      }}
      action="comment"
    >
      <Comment slot="icon"/>
    </ActionBtn>
  </div>
</article>


<style>
  .post {
    position: relative;
    display: grid;
    grid-template-areas:
      "info avatar"
      "images images"
      "buttons buttons";
    grid-template-columns: 1fr auto;
    gap: 6px;
    border-bottom: 1px solid var(--color_secondary);
    padding: var(--padding_boxes) 8px;
    width: 100%;
  }
  .post__container {
    grid-area: info;
    max-width: 89%;
    width: 100%;
    display: flex;
    flex-flow: column;
    gap: 6px;
  }
  .post__container--actions-btn {
    grid-area: buttons;
    width: 100%;
    max-width: 30%;
    margin: 0 auto;

    width: 100%;
    display: flex;
    justify-content: space-around;
    align-items: center;

  }
  .post__container--images {
    grid-area: images;
  }
  .post__h2 {
    display: flex;
    align-items: center;
    font-size: large;

    & > svg {
      color: var(--color_secondary);
    }
    & > a,
    & > span {
      color: var(--color_secondary_text);
      font-size: small;
      font-style: italic;
    }
  }
  .post__content {
    overflow: hidden;
    text-align: left;
    max-width: 55ch;
  }
  .ocult {
    max-height: 200px;
  }
  .post__content__btn {
    color: var(--color_accent);
    position: absolute;
    bottom: 2%;
    right: 2%;
  }
  .post__image {
    aspect-ratio: 16 / 9;
    object-fit: cover;
    object-position: center;
    border-radius: var(--border_size);
  }

  .post__btn {
    grid-area: avatar;
    display: flex;
    max-width: fit-content;
    border: 1px solid var(--color_secondary);
    border-radius: 100%;
    overflow: hidden;
    cursor: pointer;
  }
  .post__btn__avatar {
    aspect-ratio: 4 / 4;
    object-fit: cover;
    object-position: center;
  }
</style>
